{"version":3,"sources":["components/Link/index.js","components/MoviesList/index.js","components/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["Link","react_default","a","createElement","className","href","target","rel","Component","MoviesList","_this$props","this","props","error","isLoaded","items","map","item","key","Title","style","backgroundImage","concat","Poster","Year","Search","state","search","valueChange","event","console","log","value","_this","setState","sendSearch","fetchResult","onChange","type","placeholder","onClick","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchApi","fetch","then","res","json","result","Error","_this$state","components_Search","components_MoviesList","components_Link","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95d17b33.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.css';\n\nclass Link extends Component {\n  render() {\n    return (\n      <a\n        className=\"App-link\"\n        href=\"https://github.com/BritoMari/movies-list\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        see the code here\n        </a>\n    );\n  }\n}\n\nexport default Link;\n","import React, { Component } from 'react';\nimport './style.css';\n\nclass MoviesList extends Component {\n\n  render() {\n    const { error, isLoaded, items } = this.props;\n\n    if (error) {\n      return <div className=\"MoviesList-error\">Error: {error}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <ul className=\"MoviesList\">\n          {items.map(item => (\n            <li className=\"MoviesList-item\" key={item.Title}>\n              <span className=\"MoviesList-img\" style={{ backgroundImage: `url(${item.Poster})`}} />\n              <h2 className=\"MoviesList-title\">{item.Title}</h2>\n              <p className=\"MoviesList-year\">Ano: <strong>{item.Year}</strong></p>\n            </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n}\n\nexport default MoviesList;","import React, { Component } from 'react';\nimport './style.css';\n\nclass Search extends Component {\n  state = {\n    search: '',\n  }\n\n  valueChange = event  => {\n    console.log(event.target.value);\n\n    this.setState({\n      search: event.target.value\n    });\n  }\n\n  sendSearch = event => {\n    const { fetchResult } = this.props;\n\n    fetchResult(this.state.search);\n  }\n\n  render() {\n    return (\n      <div className=\"Search\">\n        <input value={this.state.search} onChange={this.valueChange} type=\"text\" className=\"Search-input\" placeholder=\"Search...\"/>\n        <button onClick={this.sendSearch} className=\"Search-buttton\">go</button>\n        <p className=\"Search-message\">Use the field above to search for movies, for example: Harry Potter</p>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Link from './components/Link';\nimport MoviesList from './components/MoviesList';\nimport Search from './components/Search';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchApi('Harry Potter');\n  }\n\n  fetchApi = value => {\n    fetch(`https://www.omdbapi.com/?apikey=7c323e6e&s=${value}&type=movie`)\n    .then(res => res.json())\n    .then(\n      (result) => {\n        if (result.Error){\n          this.setState({\n            isLoaded: true,\n            error: result.Error\n          });\n        } else {\n          this.setState({\n            isLoaded: true,\n            items: result.Search\n          });\n        }\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      }\n    )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">\n            Movies List\n          </h1>\n        </header>\n        <Search fetchResult={this.fetchApi} />\n        <MoviesList error={error} isLoaded={isLoaded} items={items} />\n        <footer className=\"App-footer\">\n          <p className=\"App-created\">Created by Mariana Brito, <Link /></p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}